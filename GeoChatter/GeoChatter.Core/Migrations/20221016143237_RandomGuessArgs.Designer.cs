// <auto-generated />
using System;
using GeoChatter.Core.Storage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GeoChatter.Core.Migrations
{
    [DbContext(typeof(ClientDbContext))]
    [Migration("20221016143237_RandomGuessArgs")]
    partial class RandomGuessArgs
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.6");

            modelBuilder.Entity("GeoChatter.Core.Model.Map.MapGameSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ForbidMoving")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ForbidRotating")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ForbidZooming")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GameMode")
                        .HasColumnType("TEXT");

                    b.Property<string>("GameState")
                        .HasColumnType("TEXT");

                    b.Property<string>("GameType")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsInfinite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsStreak")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MapID")
                        .HasColumnType("TEXT");

                    b.Property<string>("MapName")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoundCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StreakType")
                        .HasColumnType("TEXT");

                    b.Property<int>("TimeLimit")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MapGameSettings");
                });

            modelBuilder.Entity("GeoChatter.Core.Model.Map.MapRoundSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("BlackAndWhite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Blurry")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Is3dEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMultiGuess")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Layers")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxZoomLevel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Mirrored")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Sepia")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("UpsideDown")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MapRoundSettings");
                });

            modelBuilder.Entity("GeoChatter.Model.Bounds", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaxId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MinId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MaxId");

                    b.HasIndex("MinId");

                    b.ToTable("Bounds");
                });

            modelBuilder.Entity("GeoChatter.Model.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("GeoChatter.Model.Coordinates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Coordinates");
                });

            modelBuilder.Entity("GeoChatter.Model.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("GeoChatter.Model.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BoundsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentRound")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<int>("Flags")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("GeoGuessrId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsUsStreak")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MapGameSettingsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Mode")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NextId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PositionInChainFromStart")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SourceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Id", "Channel");

                    b.HasIndex("BoundsId");

                    b.HasIndex("MapGameSettingsId");

                    b.HasIndex("NextId")
                        .IsUnique();

                    b.HasIndex("SourceId");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("GeoChatter.Model.GameResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Distance")
                        .HasColumnType("REAL");

                    b.Property<int?>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GuessCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Score")
                        .HasColumnType("REAL");

                    b.Property<int>("Streak")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Time")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GameResults");
                });

            modelBuilder.Entity("GeoChatter.Model.GeoGuessrGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("boundsId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("forbidMoving")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("forbidRotating")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("forbidZooming")
                        .HasColumnType("INTEGER");

                    b.Property<string>("map")
                        .HasColumnType("TEXT");

                    b.Property<string>("mapName")
                        .HasColumnType("TEXT");

                    b.Property<string>("mode")
                        .HasColumnType("TEXT");

                    b.Property<int>("panoramaProvider")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("playerGcId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("round")
                        .HasColumnType("INTEGER");

                    b.Property<int>("roundCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("state")
                        .HasColumnType("TEXT");

                    b.Property<string>("streakType")
                        .HasColumnType("TEXT");

                    b.Property<int>("timeLimit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("token")
                        .HasColumnType("TEXT");

                    b.Property<string>("type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("boundsId");

                    b.HasIndex("playerGcId");

                    b.ToTable("GeoGuessrGame");
                });

            modelBuilder.Entity("GeoChatter.Model.GGBounds", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("maxId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("minId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("maxId");

                    b.HasIndex("minId");

                    b.ToTable("GGBounds");
                });

            modelBuilder.Entity("GeoChatter.Model.GGGuess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GGPlayerGcId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("distanceId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("distanceInMeters")
                        .HasColumnType("REAL");

                    b.Property<double>("lat")
                        .HasColumnType("REAL");

                    b.Property<double>("lng")
                        .HasColumnType("REAL");

                    b.Property<int?>("roundScoreId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("roundScoreInPercentage")
                        .HasColumnType("REAL");

                    b.Property<int>("roundScoreInPoints")
                        .HasColumnType("INTEGER");

                    b.Property<string>("streakLocationCode")
                        .HasColumnType("TEXT");

                    b.Property<int>("time")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("timedOut")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("timedOutWithGuess")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GGPlayerGcId");

                    b.HasIndex("distanceId");

                    b.HasIndex("roundScoreId");

                    b.ToTable("GGGuess");
                });

            modelBuilder.Entity("GeoChatter.Model.GGMax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("lat")
                        .HasColumnType("REAL");

                    b.Property<double>("lng")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("GGMax");
                });

            modelBuilder.Entity("GeoChatter.Model.GGMeters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("unit")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GGMeters");
                });

            modelBuilder.Entity("GeoChatter.Model.GGMiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("unit")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GGMiles");
                });

            modelBuilder.Entity("GeoChatter.Model.GGMin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("lat")
                        .HasColumnType("REAL");

                    b.Property<double>("lng")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("GGMin");
                });

            modelBuilder.Entity("GeoChatter.Model.GGPin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("anchor")
                        .HasColumnType("TEXT");

                    b.Property<bool>("isDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GGPin");
                });

            modelBuilder.Entity("GeoChatter.Model.GGPlayer", b =>
                {
                    b.Property<int>("GcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("currentPosition")
                        .HasColumnType("INTEGER");

                    b.Property<string>("id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("isLeader")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isVerified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("nick")
                        .HasColumnType("TEXT");

                    b.Property<int?>("pinId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("totalDistanceId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("totalDistanceInMeters")
                        .HasColumnType("REAL");

                    b.Property<int?>("totalScoreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("totalStreak")
                        .HasColumnType("INTEGER");

                    b.Property<int>("totalTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("GcId");

                    b.HasIndex("pinId");

                    b.HasIndex("totalDistanceId");

                    b.HasIndex("totalScoreId");

                    b.ToTable("GGPlayer");
                });

            modelBuilder.Entity("GeoChatter.Model.GGRound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GeoGuessrGameId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("heading")
                        .HasColumnType("REAL");

                    b.Property<double>("lat")
                        .HasColumnType("REAL");

                    b.Property<double>("lng")
                        .HasColumnType("REAL");

                    b.Property<string>("panoId")
                        .HasColumnType("TEXT");

                    b.Property<double>("pitch")
                        .HasColumnType("REAL");

                    b.Property<string>("streakLocationCode")
                        .HasColumnType("TEXT");

                    b.Property<double>("zoom")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("GeoGuessrGameId");

                    b.ToTable("GGRound");
                });

            modelBuilder.Entity("GeoChatter.Model.GGRoundScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("amount")
                        .HasColumnType("TEXT");

                    b.Property<double>("percentage")
                        .HasColumnType("REAL");

                    b.Property<string>("unit")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GGRoundScore");
                });

            modelBuilder.Entity("GeoChatter.Model.GGTotalDistance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("metersId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("milesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("metersId");

                    b.HasIndex("milesId");

                    b.ToTable("GGTotalDistance");
                });

            modelBuilder.Entity("GeoChatter.Model.GGTotalScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("amount")
                        .HasColumnType("TEXT");

                    b.Property<double>("percentage")
                        .HasColumnType("REAL");

                    b.Property<string>("unit")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GGTotalScore");
                });

            modelBuilder.Entity("GeoChatter.Model.Guess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bot")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CountryExactId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Distance")
                        .HasColumnType("REAL");

                    b.Property<double>("FOV")
                        .HasColumnType("REAL");

                    b.Property<int>("GuessCounter")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GuessLocationId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("GuessedBefore")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Heading")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsStreamerGuess")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTemporary")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Layer")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pano")
                        .HasColumnType("TEXT");

                    b.Property<double>("Pitch")
                        .HasColumnType("REAL");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RandomGuessArgs")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RoundId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Score")
                        .HasColumnType("REAL");

                    b.Property<string>("Source")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Streak")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Time")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("WasRandom")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Zoom")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("CountryExactId");

                    b.HasIndex("CountryId");

                    b.HasIndex("GuessLocationId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("RoundId");

                    b.ToTable("Guess");
                });

            modelBuilder.Entity("GeoChatter.Model.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("BestGame")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(0.0);

                    b.Property<double>("BestRound")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(0.0);

                    b.Property<int>("BestStreak")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<int>("CorrectCountries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("CountryStreak")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("FirstGuessMade")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdOfLastGame")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBanned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int?>("LastGameId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastGuess")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<int>("NoOf5kGuesses")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("NoOfGuesses")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("NumberOfCountries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("Perfects")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("PlatformId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PlayerFlag")
                        .HasColumnType("TEXT");

                    b.Property<string>("PlayerFlagName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PlayerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RoundNumberOfLastGuess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("SourcePlatform")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StreakBefore")
                        .HasColumnType("INTEGER");

                    b.Property<double>("SumOfGuesses")
                        .HasColumnType("REAL");

                    b.Property<string>("SupabaseId")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalDistance")
                        .HasColumnType("REAL");

                    b.Property<int>("Wins")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasAlternateKey("Id", "Channel");

                    b.HasIndex("LastGameId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("GeoChatter.Model.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CorrectLocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExactCountryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Flags")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MapRoundSettingsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CorrectLocationId");

                    b.HasIndex("CountryId");

                    b.HasIndex("ExactCountryId");

                    b.HasIndex("GameId");

                    b.HasIndex("MapRoundSettingsId");

                    b.ToTable("Round");
                });

            modelBuilder.Entity("GeoChatter.Model.RoundResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Distance")
                        .HasColumnType("REAL");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RoundId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Score")
                        .HasColumnType("REAL");

                    b.Property<int>("Streak")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Time")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("RoundId");

                    b.ToTable("RoundResult");
                });

            modelBuilder.Entity("GeoChatter.Model.Bounds", b =>
                {
                    b.HasOne("GeoChatter.Model.Coordinates", "Max")
                        .WithMany()
                        .HasForeignKey("MaxId");

                    b.HasOne("GeoChatter.Model.Coordinates", "Min")
                        .WithMany()
                        .HasForeignKey("MinId");

                    b.Navigation("Max");

                    b.Navigation("Min");
                });

            modelBuilder.Entity("GeoChatter.Model.Game", b =>
                {
                    b.HasOne("GeoChatter.Model.Bounds", "Bounds")
                        .WithMany()
                        .HasForeignKey("BoundsId");

                    b.HasOne("GeoChatter.Core.Model.Map.MapGameSettings", "MapGameSettings")
                        .WithMany()
                        .HasForeignKey("MapGameSettingsId");

                    b.HasOne("GeoChatter.Model.Game", "Next")
                        .WithOne("Previous")
                        .HasForeignKey("GeoChatter.Model.Game", "NextId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GeoChatter.Model.GeoGuessrGame", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Bounds");

                    b.Navigation("MapGameSettings");

                    b.Navigation("Next");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("GeoChatter.Model.GameResult", b =>
                {
                    b.HasOne("GeoChatter.Model.Game", "Game")
                        .WithMany("Results")
                        .HasForeignKey("GameId");

                    b.HasOne("GeoChatter.Model.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("GeoChatter.Model.GeoGuessrGame", b =>
                {
                    b.HasOne("GeoChatter.Model.GGBounds", "bounds")
                        .WithMany()
                        .HasForeignKey("boundsId");

                    b.HasOne("GeoChatter.Model.GGPlayer", "player")
                        .WithMany()
                        .HasForeignKey("playerGcId");

                    b.Navigation("bounds");

                    b.Navigation("player");
                });

            modelBuilder.Entity("GeoChatter.Model.GGBounds", b =>
                {
                    b.HasOne("GeoChatter.Model.GGMax", "max")
                        .WithMany()
                        .HasForeignKey("maxId");

                    b.HasOne("GeoChatter.Model.GGMin", "min")
                        .WithMany()
                        .HasForeignKey("minId");

                    b.Navigation("max");

                    b.Navigation("min");
                });

            modelBuilder.Entity("GeoChatter.Model.GGGuess", b =>
                {
                    b.HasOne("GeoChatter.Model.GGPlayer", null)
                        .WithMany("guesses")
                        .HasForeignKey("GGPlayerGcId");

                    b.HasOne("GeoChatter.Model.GGTotalDistance", "distance")
                        .WithMany()
                        .HasForeignKey("distanceId");

                    b.HasOne("GeoChatter.Model.GGRoundScore", "roundScore")
                        .WithMany()
                        .HasForeignKey("roundScoreId");

                    b.Navigation("distance");

                    b.Navigation("roundScore");
                });

            modelBuilder.Entity("GeoChatter.Model.GGPlayer", b =>
                {
                    b.HasOne("GeoChatter.Model.GGPin", "pin")
                        .WithMany()
                        .HasForeignKey("pinId");

                    b.HasOne("GeoChatter.Model.GGTotalDistance", "totalDistance")
                        .WithMany()
                        .HasForeignKey("totalDistanceId");

                    b.HasOne("GeoChatter.Model.GGTotalScore", "totalScore")
                        .WithMany()
                        .HasForeignKey("totalScoreId");

                    b.Navigation("pin");

                    b.Navigation("totalDistance");

                    b.Navigation("totalScore");
                });

            modelBuilder.Entity("GeoChatter.Model.GGRound", b =>
                {
                    b.HasOne("GeoChatter.Model.GeoGuessrGame", null)
                        .WithMany("rounds")
                        .HasForeignKey("GeoGuessrGameId");
                });

            modelBuilder.Entity("GeoChatter.Model.GGTotalDistance", b =>
                {
                    b.HasOne("GeoChatter.Model.GGMeters", "meters")
                        .WithMany()
                        .HasForeignKey("metersId");

                    b.HasOne("GeoChatter.Model.GGMiles", "miles")
                        .WithMany()
                        .HasForeignKey("milesId");

                    b.Navigation("meters");

                    b.Navigation("miles");
                });

            modelBuilder.Entity("GeoChatter.Model.Guess", b =>
                {
                    b.HasOne("GeoChatter.Model.Country", "CountryExact")
                        .WithMany()
                        .HasForeignKey("CountryExactId");

                    b.HasOne("GeoChatter.Model.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("GeoChatter.Model.Coordinates", "GuessLocation")
                        .WithMany()
                        .HasForeignKey("GuessLocationId");

                    b.HasOne("GeoChatter.Model.Player", "Player")
                        .WithMany("Guesses")
                        .HasForeignKey("PlayerId");

                    b.HasOne("GeoChatter.Model.Round", "Round")
                        .WithMany("Guesses")
                        .HasForeignKey("RoundId");

                    b.Navigation("Country");

                    b.Navigation("CountryExact");

                    b.Navigation("GuessLocation");

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("GeoChatter.Model.Player", b =>
                {
                    b.HasOne("GeoChatter.Model.Game", "LastGame")
                        .WithMany("Players")
                        .HasForeignKey("LastGameId");

                    b.Navigation("LastGame");
                });

            modelBuilder.Entity("GeoChatter.Model.Round", b =>
                {
                    b.HasOne("GeoChatter.Model.Coordinates", "CorrectLocation")
                        .WithMany()
                        .HasForeignKey("CorrectLocationId");

                    b.HasOne("GeoChatter.Model.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("GeoChatter.Model.Country", "ExactCountry")
                        .WithMany()
                        .HasForeignKey("ExactCountryId");

                    b.HasOne("GeoChatter.Model.Game", null)
                        .WithMany("Rounds")
                        .HasForeignKey("GameId");

                    b.HasOne("GeoChatter.Core.Model.Map.MapRoundSettings", "MapRoundSettings")
                        .WithMany()
                        .HasForeignKey("MapRoundSettingsId");

                    b.Navigation("CorrectLocation");

                    b.Navigation("Country");

                    b.Navigation("ExactCountry");

                    b.Navigation("MapRoundSettings");
                });

            modelBuilder.Entity("GeoChatter.Model.RoundResult", b =>
                {
                    b.HasOne("GeoChatter.Model.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.HasOne("GeoChatter.Model.Round", "Round")
                        .WithMany("Results")
                        .HasForeignKey("RoundId");

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("GeoChatter.Model.Game", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Previous");

                    b.Navigation("Results");

                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("GeoChatter.Model.GeoGuessrGame", b =>
                {
                    b.Navigation("rounds");
                });

            modelBuilder.Entity("GeoChatter.Model.GGPlayer", b =>
                {
                    b.Navigation("guesses");
                });

            modelBuilder.Entity("GeoChatter.Model.Player", b =>
                {
                    b.Navigation("Guesses");
                });

            modelBuilder.Entity("GeoChatter.Model.Round", b =>
                {
                    b.Navigation("Guesses");

                    b.Navigation("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
